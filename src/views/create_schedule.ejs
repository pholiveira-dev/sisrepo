<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Criar Agendamento</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f7fa; color: #333; }
        .container { background: #fff; padding: 30px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); max-width: 500px; margin: 50px auto; }
        h1 { text-align: center; color: #17a2b8; margin-bottom: 25px; }
        label { display: block; margin-bottom: 5px; font-weight: bold; color: #555; }
        input[type="date"], select, input[type="number"] { width: 100%; padding: 12px; margin-bottom: 15px; border: 1px solid #ccc; border-radius: 6px; box-sizing: border-box; }
        button { background-color: #17a2b8; color: white; padding: 14px 20px; border: none; border-radius: 6px; cursor: pointer; width: 100%; font-size: 16px; transition: background-color 0.3s; }
        button:hover { background-color: #117a8b; }
        .message { margin-top: 20px; padding: 15px; border-radius: 6px; font-weight: bold; }
        .success { background-color: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }
        .error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .nav-link { display: block; text-align: center; margin-top: 15px; color: #6c757d; text-decoration: none; }
        .nav-link:hover { text-decoration: underline; }
    </style>
</head>
<body>

    <div class="container">
        <h1>Criar Novo Agendamento</h1>

        <form id="scheduleForm">
            <label for="schedule_date">Data do Agendamento</label>
            <input type="date" id="schedule_date" name="schedule_date" required>

            <label for="shift">Turno</label>
            <select id="shift" name="shift" required>
                <option value="" disabled selected>Selecione o Turno</option>
                <option value="Manhã">Manhã</option>
                <option value="Tarde">Tarde</option>
                <option value="Noite">Noite</option>
            </select>

            <label for="max_capacity">Capacidade Máxima (Padrão: 30)</label>
            <input type="number" id="max_capacity" name="max_capacity" value="30" min="1" required>

            <button type="submit">Agendar</button>
        </form>
        <a href="/schedules" class="nav-link">Ver Agendamentos Existentes</a>
        <div id="runtimeMessage" class="message" style="display: none;"></div>
    </div>

    <script>
        const API_BASE_URL = window.location.origin;
        const userToken = localStorage.getItem('userToken');
        const messageElement = document.getElementById('runtimeMessage');

        function showMessage(type, content) {
            messageElement.style.display = 'block';
            messageElement.className = type === 'success' ? 'success' : 'error';
            messageElement.innerHTML = content;
        }

        if (!userToken) {
            showMessage('error', '<strong>Erro de Autenticação:</strong> Faça o login para criar agendamentos.');
            setTimeout(() => { window.location.href = '/login'; }, 3000); 
        }

        document.getElementById('scheduleForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            if (!userToken) {
                showMessage('error', 'Token de usuário não encontrado. Faça o login novamente.');
                return;
            }

            const schedule_date = document.getElementById('schedule_date').value;
            const shift = document.getElementById('shift').value;
            const max_capacity = parseInt(document.getElementById('max_capacity').value, 10);

            // O created_by_user_id será injetado pelo backend (via token/middleware)
            const scheduleData = { schedule_date, shift, max_capacity };

            try {
                const response = await fetch(`${API_BASE_URL}/schedules`, {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${userToken}` 
                    },
                    body: JSON.stringify(scheduleData)
                });

                const data = await response.json();
                
                if (response.ok || response.status === 201) {
                    showMessage('success', `Agendamento criado com sucesso! ID: ${data.id_schedule}`);
                    document.getElementById('scheduleForm').reset();
                } else {
                    showMessage('error', `Erro ao agendar (Status ${response.status}): ${data.message || 'Erro desconhecido.'}`);
                    console.error('Erro de Agendamento:', data);
                }

            } catch (error) {
                showMessage('error', `Erro de conexão: ${error.message}. Verifique o console.`);
                console.error('Erro de Rede:', error);
            }
        });
    </script>
</body>
</html>
