<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciamento de Usuários (CRUD)</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f4; }
        .container { background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); margin-bottom: 20px; }
        h1, h2 { color: #333; }
        .info { background: #d9edf7; padding: 10px; border-radius: 4px; border: 1px solid #bce8f1; color: #31708f; margin-bottom: 20px; }
        button { padding: 8px 15px; margin: 5px; border: none; border-radius: 4px; cursor: pointer; color: white; font-weight: bold; }
        .btn-get { background-color: #4CAF50; }
        .btn-put { background-color: #ff9800; }
        .btn-delete { background-color: #f44336; }
        input[type="text"], input[type="email"], input[type="password"], input[type="number"], select { padding: 8px; margin: 5px 0; border: 1px solid #ccc; border-radius: 4px; width: 250px; }
        #listaItens { list-style: none; padding: 0; }
        #listaItens li { background: #eee; margin-bottom: 8px; padding: 10px; border-radius: 4px; display: flex; justify-content: space-between; align-items: center; }
        .resultado { margin-top: 15px; padding: 10px; border: 1px solid #ddd; background-color: #e9e9e9; white-space: pre-wrap; word-wrap: break-word; max-height: 200px; overflow-y: auto; }
        .user-info-text { margin-right: 15px; }
    </style>
</head>
<body>

    <h1>Gerenciamento de Usuários (Admin)</h1>
    
    <div class="info">
        <p><strong>Status de Autenticação:</strong> <span id="authStatus">Token não encontrado. Faça o login em <a href="/login">/login</a> primeiro.</span></p>
        <p><strong>Usuário Logado:</strong> <span id="loggedUser">N/A</span> | <strong>Posição:</strong> <span id="userPosition">N/A</span></p>
    </div>

    <div class="container">
        <h2>1. Listar Usuários (GET)</h2>
        <button class="btn-get" onclick="listarUsuarios()">GET /users (Requer Token)</button>
        <h3>Lista de Usuários:</h3>
        <ul id="listaItens">
            <li>Carregue o token e clique em GET.</li>
        </ul>
    </div>

    <div class="container">
        <h2>2. Atualizar Usuário (PUT)</h2>
        <input type="number" id="putUserId" placeholder="ID do Usuário" value="1" min="1">
        <input type="text" id="putUserName" placeholder="Novo Nome">
        <input type="password" id="putUserPassword" placeholder="Nova Senha (Opcional)">
        
        <select name="position" id="putUserPosition">
            <option value="">(Não Alterar)</option>
            <option value="Preceptor">Preceptor</option>
            <option value="Coordenacao">Coordenação</option>
        </select>
        
        <button class="btn-put" onclick="atualizarUsuario()">PUT /users/:id_user (Requer Token)</button>
        <div class="resultado" id="resultadoPut"></div>
    </div>

    <div class="container">
        <h2>3. Excluir Usuário (DELETE)</h2>
        <input type="number" id="deleteUserId" placeholder="ID do Usuário" value="1" min="1">
        <button class="btn-delete" onclick="excluirUsuario()">DELETE /users/:id_user (Requer Token)</button>
        <div class="resultado" id="resultadoDelete"></div>
    </div>

    <script>
        const API_BASE_URL = window.location.origin;
        const userToken = localStorage.getItem('userToken');

        // Configura o status de autenticação na página
        if (userToken) {
            document.getElementById('authStatus').textContent = 'Token Ativo';
            document.getElementById('authStatus').style.color = '#155724';
            document.getElementById('loggedUser').textContent = localStorage.getItem('userName') || 'Desconhecido';
            document.getElementById('userPosition').textContent = localStorage.getItem('userPosition') || 'N/A';
        } else {
            document.getElementById('authStatus').style.color = '#721c24';
        }

        function getAuthHeaders() {
            if (!userToken) {
                alert('Token não encontrado. Faça o login primeiro!');
                return null;
            }
            return {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${userToken}`
            };
        }

        function exibirResultado(idElemento, status, dados) {
            const elemento = document.getElementById(idElemento);
            elemento.innerHTML = `<strong>Status: ${status}</strong>\n\n` + JSON.stringify(dados, null, 2);
        }

        // 1. GET (Listar Usuários)
        async function listarUsuarios() {
            const headers = getAuthHeaders();
            if (!headers) return;

            const lista = document.getElementById('listaItens');
            lista.innerHTML = '<li>Carregando...</li>';

            try {
                const response = await fetch(`${API_BASE_URL}/users`, { headers });
                const status = response.status;
                
                // Tenta ler JSON. Se a API retornar 401/403 sem JSON (apenas texto), o .json() vai falhar.
                const data = await response.json().catch(() => ({ message: 'Erro de permissão ou formato de dados inválido.', rawStatus: status }));
                
                if (response.ok) {
                    lista.innerHTML = '';
                    data.forEach(item => {
                        const li = document.createElement('li');
                        li.innerHTML = `
                            <div class="user-info-text">
                                <strong>ID: ${item.id_user}</strong> | 
                                ${item.name} (${item.email}) - ${item.position}
                            </div>
                        `;
                        lista.appendChild(li);
                    });
                } else {
                    lista.innerHTML = `<li>Erro ao carregar (Status ${status}): ${data.message || 'Sem detalhes do erro.'}</li>`;
                    console.error('Erro GET Users:', data);
                }
            } catch (error) {
                lista.innerHTML = `<li>Erro de conexão: ${error.message}.</li>`;
                console.error('Erro de Rede:', error);
            }
        }

        // 2. PUT (Atualizar Usuário)
        async function atualizarUsuario() {
            const headers = getAuthHeaders();
            if (!headers) return;

            const id = document.getElementById('putUserId').value;
            const name = document.getElementById('putUserName').value;
            const password = document.getElementById('putUserPassword').value;
            const position = document.getElementById('putUserPosition').value;
            const URL = `${API_BASE_URL}/users/${id}`;

            const userData = {};
            if (name) userData.name = name;
            if (password) userData.password = password;
            if (position) userData.position = position;

            try {
                const response = await fetch(URL, {
                    method: 'PUT',
                    headers: headers,
                    body: JSON.stringify(userData),
                });

                const status = response.status;
                const data = await response.json().catch(() => ({ message: 'Sucesso, sem corpo de resposta (ex: 204 No Content)' }));
                exibirResultado('resultadoPut', status, data);
                
                if (response.ok) {
                    listarUsuarios(); // Atualiza a lista
                }

            } catch (error) {
                exibirResultado('resultadoPut', 'ERRO', { mensagem: `Erro de conexão: ${error.message}` });
                console.error("Erro PUT:", error);
            }
        }

        // 3. DELETE (Excluir Usuário)
        async function excluirUsuario() {
            const headers = getAuthHeaders();
            if (!headers) return;
            
            const id = document.getElementById('deleteUserId').value;
            const URL = `${API_BASE_URL}/users/${id}`;

            try {
                const response = await fetch(URL, {
                    method: 'DELETE',
                    headers: headers,
                });
                
                const status = response.status;
                // Tenta ler o JSON, se falhar (ex: 204 No Content), usa uma mensagem padrão
                const data = await response.json().catch(() => ({ message: 'Item excluído com sucesso (provavelmente 204 No Content)' }));
                exibirResultado('resultadoDelete', status, data);

                if (response.ok || status === 204) {
                    listarUsuarios(); // Atualiza a lista
                }

            } catch (error) {
                exibirResultado('resultadoDelete', 'ERRO', { mensagem: `Erro de conexão: ${error.message}` });
                console.error("Erro DELETE:", error);
            }
        }
    </script>

</body>
</html>