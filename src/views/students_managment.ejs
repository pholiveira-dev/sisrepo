<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciamento de Alunos</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f0f4f8; color: #333; }
        .container { background: #fff; padding: 25px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); margin-bottom: 25px; }
        h1, h2 { color: #007bff; text-align: center; }
        .info { background: #e0f7fa; padding: 15px; border-radius: 8px; border: 1px solid #b3e5fc; color: #007bff; margin-bottom: 20px; font-size: 0.9em; }
        button { padding: 10px 18px; margin: 5px; border: none; border-radius: 6px; cursor: pointer; color: white; font-weight: bold; transition: background-color 0.3s; }
        .btn-list { background-color: #007bff; }
        .btn-list:hover { background-color: #0056b3; }
        .btn-delete { background-color: #dc3545; }
        .btn-delete:hover { background-color: #c82333; }
        input, select { padding: 8px; margin: 5px 0; border: 1px solid #ccc; border-radius: 4px; }
        #listaAlunos { list-style: none; padding: 0; }
        #listaAlunos li { background: #f9f9f9; margin-bottom: 10px; padding: 15px; border-radius: 8px; border-left: 5px solid #007bff; display: flex; justify-content: space-between; align-items: center; }
        .student-details { flex-grow: 1; }
        .student-actions button { margin-left: 10px; }
        .resultado { margin-top: 15px; padding: 15px; border: 1px solid #ddd; background-color: #e9ecef; border-radius: 8px; white-space: pre-wrap; word-wrap: break-word; max-height: 250px; overflow-y: auto; font-size: 0.9em; }
        .nav-link { display: block; text-align: center; margin-top: 15px; color: #28a745; text-decoration: none; }
        .nav-link:hover { text-decoration: underline; }
    </style>
</head>
<body>

    <h1>Gestão de Alunos</h1>
    
    <div class="info">
        <p><strong>Status de Autenticação:</strong> <span id="authStatus">Carregando...</span></p>
        <p><strong>Usuário Logado:</strong> <span id="loggedUser">N/A</span> | <strong>Posição:</strong> <span id="userPosition">N/A</span></p>
        <p><strong><small>Nota:</small></strong> Para realizar o PUT e DELETE, garanta que as rotas `PUT /students/:id_student` e `DELETE /students/:id_student` estejam configuradas no seu backend.</p>
    </div>

    <!-- GET (Listar Alunos) -->
    <div class="container">
        <h2>Lista de Alunos (GET /students)</h2>
        <button class="btn-list" onclick="listarAlunos()">Recarregar Lista de Alunos</button>
        <ul id="listaAlunos">
            <li>Clique no botão para carregar a lista.</li>
        </ul>
        <div class="resultado" id="resultadoGet" style="display: none;"></div>
        <a href="/students/create" class="nav-link">Cadastrar Novo Aluno</a>
    </div>

    <!-- PUT/DELETE (Ações no Aluno) -->
    <div class="container">
        <h2>Ações: Atualizar/Excluir (PUT/DELETE)</h2>
        <p>Use os botões ao lado de cada aluno ou insira o ID manualmente para testar as ações:</p>
        <input type="number" id="actionStudentId" placeholder="ID do Aluno para Ação" value="1" min="1">
        <input type="text" id="actionStudentName" placeholder="Novo Nome (Opcional)">
        <select id="actionSemester" style="width: 150px;">
            <option value="">(Semestre Inalterado)</option>
            <option value="7 Semestre">7 Semestre</option>
            <option value="8 Semestre">8 Semestre</option>
            <option value="7/8 Semestre">7/8 Semestre</option>
        </select>
        
        <button class="btn-list" onclick="atualizarAlunoManual()">PUT Aluno</button>
        <button class="btn-delete" onclick="excluirAlunoManual()">DELETE Aluno</button>
        <div class="resultado" id="resultadoAcoes">Aguardando ações...</div>
    </div>

    <script>
        const API_BASE_URL = window.location.origin;
        const userToken = localStorage.getItem('userToken');

        // Inicializa o status de autenticação
        const authStatusElement = document.getElementById('authStatus');
        const loggedUserElement = document.getElementById('loggedUser');
        const userPositionElement = document.getElementById('userPosition');
        
        if (userToken) {
            authStatusElement.textContent = 'Token Ativo';
            authStatusElement.style.color = '#155724';
            loggedUserElement.textContent = localStorage.getItem('userName') || 'Desconhecido';
            userPositionElement.textContent = localStorage.getItem('userPosition') || 'N/A';
        } else {
            authStatusElement.textContent = 'Token não encontrado.';
            authStatusElement.style.color = '#dc3545';
            setTimeout(() => { window.location.href = '/login'; }, 3000); // Redireciona
        }

        function getAuthHeaders() {
            if (!userToken) {
                alert('Token não encontrado. Faça o login primeiro!');
                return null;
            }
            return {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${userToken}`
            };
        }

        function exibirResultado(idElemento, status, dados) {
            const elemento = document.getElementById(idElemento);
            elemento.innerHTML = `<strong>Status: ${status}</strong>\n\n` + JSON.stringify(dados, null, 2);
            elemento.style.display = 'block';
        }

        // 1. GET (Listar Alunos)
        async function listarAlunos() {
            const headers = getAuthHeaders();
            if (!headers) return;

            const lista = document.getElementById('listaAlunos');
            lista.innerHTML = '<li>Carregando...</li>';

            try {
                const response = await fetch(`${API_BASE_URL}/students`, { headers });
                const status = response.status;
                const data = await response.json().catch(() => ({ message: 'Erro de permissão ou formato de dados inválido.', rawStatus: status }));
                
                if (response.ok) {
                    lista.innerHTML = '';
                    if (data.length === 0) {
                        lista.innerHTML = '<li>Nenhum aluno cadastrado.</li>';
                    }
                    data.forEach(item => {
                        const li = document.createElement('li');
                        li.innerHTML = `
                            <div class="student-details">
                                <strong>ID: ${item.id_student}</strong> | 
                                ${item.name || 'Nome não retornado'} (${item.email}) - RGM: ${item.rgm} (${item.current_semester || 'N/A'})
                                <br><small>Criado por: ${item.created_by_user_id} | Atualizado por: ${item.updated_by_user_id}</small>
                            </div>
                            <div class="student-actions">
                                <button class="btn-delete" onclick="excluirAluno(${item.id_student})">Excluir</button>
                            </div>
                        `;
                        lista.appendChild(li);
                    });
                } else {
                    lista.innerHTML = `<li>Erro ao carregar (Status ${status}): ${data.message || 'Sem detalhes do erro.'}</li>`;
                    console.error('Erro GET Students:', data);
                }
                exibirResultado('resultadoGet', status, data);
            } catch (error) {
                lista.innerHTML = `<li>Erro de conexão: ${error.message}.</li>`;
                console.error('Erro de Rede:', error);
            }
        }

        // 2. PUT (Atualizar Aluno)
        async function atualizarAluno(id, newName = null, newSemester = null) {
            const headers = getAuthHeaders();
            if (!headers) return;
            
            const URL = `${API_BASE_URL}/students/${id}`;
            
            // Adiciona o updated_by_user_id no front-end para simplificar o teste,
            // mas o ideal é que o controller (backend) pegue o ID do token.
            // Para o seu modelo, você precisará configurar o controller para pegar o ID do token e enviá-lo para o service.
            const updated_by_user_id = localStorage.getItem('userIdFromToken') || 'TokenUser'; 

            const studentData = { updated_by_user_id };
            if (newName) studentData.name = newName;
            if (newSemester) studentData.current_semester = newSemester;

            try {
                const response = await fetch(URL, {
                    method: 'PUT',
                    headers: headers,
                    body: JSON.stringify(studentData),
                });

                const status = response.status;
                const data = await response.json().catch(() => ({ message: 'Sucesso, sem corpo de resposta (ex: 204 No Content)' }));
                exibirResultado('resultadoAcoes', status, data);
                
                if (response.ok) {
                    listarAlunos();
                }

            } catch (error) {
                exibirResultado('resultadoAcoes', 'ERRO', { mensagem: `Erro de conexão: ${error.message}` });
                console.error("Erro PUT:", error);
            }
        }

        function atualizarAlunoManual() {
            const id = document.getElementById('actionStudentId').value;
            const name = document.getElementById('actionStudentName').value;
            const semester = document.getElementById('actionSemester').value;
            if (!id) {
                exibirResultado('resultadoAcoes', 'ALERTA', { mensagem: 'Informe o ID do aluno.' });
                return;
            }
            atualizarAluno(id, name, semester);
        }

        // 3. DELETE (Excluir Aluno)
        async function excluirAluno(id) {
            const confirmacao = confirm(`Tem certeza que deseja EXCLUIR o aluno com ID ${id}?`);
            if (!confirmacao) return;

            const headers = getAuthHeaders();
            if (!headers) return;
            
            const URL = `${API_BASE_URL}/students/${id}`;

            try {
                const response = await fetch(URL, {
                    method: 'DELETE',
                    headers: headers,
                });
                
                const status = response.status;
                const data = await response.json().catch(() => ({ message: 'Item excluído com sucesso (provavelmente 204 No Content)' }));
                exibirResultado('resultadoAcoes', status, data);

                if (response.ok || status === 204) {
                    listarAlunos();
                }

            } catch (error) {
                exibirResultado('resultadoAcoes', 'ERRO', { mensagem: `Erro de conexão: ${error.message}` });
                console.error("Erro DELETE:", error);
            }
        }
        
        function excluirAlunoManual() {
             const id = document.getElementById('actionStudentId').value;
             if (!id) {
                exibirResultado('resultadoAcoes', 'ALERTA', { mensagem: 'Informe o ID do aluno.' });
                return;
            }
            excluirAluno(id);
        }

        window.onload = listarAlunos; // Carrega a lista automaticamente ao abrir a página
    </script>
</body>
</html>
